package manager;

import org.junit.jupiter.api.Test;
import task.*;


import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

public class InMemoryTaskManagerTest extends TaskManagerTest<InMemoryTaskManager> {

    @Override
    protected InMemoryTaskManager createManager() {
        return new InMemoryTaskManager();
    }

    @Test
    public void testAddAndGetTask() {
        Task task = new Task("Test task", "Description");
        manager.addTask(task);

        Task savedTask = manager.getTask(task.getId());
        assertNotNull(savedTask);
        assertEquals(task, savedTask);
    }

    @Test
    public void testAddAndGetEpicWithSubtasks() {
        Epic epic = new Epic("Epic", "Description");
        manager.addEpic(epic);

        Subtask sub1 = new Subtask("Subtask1", "Description", epic.getId());
        Subtask sub2 = new Subtask("Subtask2", "Description", epic.getId());

        manager.addSubtask(sub1);
        manager.addSubtask(sub2);

        List<Subtask> subs = manager.getSubtasksOfEpic(epic.getId());
        assertEquals(2, subs.size());
        assertTrue(subs.contains(sub1));
        assertTrue(subs.contains(sub2));
    }

    @Test
    public void testUpdateSubtaskStatusUpdatesEpic() {
        Epic epic = new Epic("Epic", "Description");
        manager.addEpic(epic);

        Subtask sub = new Subtask("Subtask", "Description", epic.getId());
        manager.addSubtask(sub);

        assertEquals(TaskStatus.NEW, manager.getEpic(epic.getId()).getStatus());

        sub.setStatus(TaskStatus.DONE);
        manager.updateSubtask(sub);

        assertEquals(TaskStatus.DONE, manager.getEpic(epic.getId()).getStatus());
    }

    @Test
    public void testHistoryContainsViewedTasks() {
        Task task = new Task("Task", "Description");
        manager.addTask(task);
        manager.getTask(task.getId());

        Epic epic = new Epic("Epic", "Description");
        manager.addEpic(epic);
        manager.getEpic(epic.getId());

        Subtask subtask = new Subtask("Subtask", "Description", epic.getId());
        manager.addSubtask(subtask);
        manager.getSubtask(subtask.getId());

        assertEquals(3, manager.getHistory().size());
    }

    @Test
    public void managerShouldStoreAndRetrieveTasksById() {
        Task task = new Task("Test", "Desc");
        manager.addTask(task);

        assertEquals(task, manager.getTask(task.getId()));
    }

    @Test
    public void manualIdShouldNotConflictWithAutoGeneratedIds() {
        Task manualTask = new Task("Manual", "M");
        manualTask.setId(100);
        manager.addTask(manualTask);

        Task autoTask = new Task("Auto", "A");
        manager.addTask(autoTask); // его id должен быть не 100

        assertNotEquals(100, autoTask.getId());
    }

    @Test
    public void storedTaskShouldNotBeModifiedExternally() {
        Task task = new Task("Immutable", "Desc");
        manager.addTask(task);

        Task fromManager = manager.getTask(task.getId());

        assertEquals(task.getName(), fromManager.getName());
        assertEquals(task.getDescription(), fromManager.getDescription());
        assertEquals(task.getStatus(), fromManager.getStatus());
    }

    @Test
    public void addingSubtaskWithSameIdAsEpicShouldThrow() {
        Epic epic = new Epic("Epic", "Description");
        manager.addEpic(epic);

        Subtask subtask = new Subtask("Subtask", "Description", epic.getId());
        subtask.setId(epic.getId());  // id == epicId

        assertThrows(IllegalArgumentException.class, () -> manager.addSubtask(subtask));
    }

    @Test
    public void shouldClearSubtaskIdsFromEpicWhenSubtaskIsDeleted() {
        Epic epic = new Epic("Epic", "desc");
        epic.setId(1);

        Subtask sub1 = new Subtask("Sub 1", "desc", 1);
        sub1.setId(2);
        Subtask sub2 = new Subtask("Sub 2", "desc", 1);
        sub2.setId(3);

        manager.addEpic(epic);
        manager.addSubtask(sub1);
        manager.addSubtask(sub2);

        assertEquals(2, manager.getEpic(1).getSubtaskIds().size());

        manager.deleteSubtask(2);

        List<Integer> remaining = manager.getEpic(1).getSubtaskIds();
        assertFalse(remaining.contains(2));
        assertTrue(remaining.contains(3));
    }

    @Test
    public void changingTaskWithSetterShouldNotBreakManagerConsistency() {
        Task task = new Task("Task", "desc");
        manager.addTask(task);

        int id = task.getId(); // получаем ID, присвоенный менеджером

        task.setName("Changed!");
        task.setStatus(TaskStatus.DONE);

        Task retrieved = manager.getTask(id);

        assertEquals("Changed!", retrieved.getName());
        assertEquals(TaskStatus.DONE, retrieved.getStatus());
    }
}