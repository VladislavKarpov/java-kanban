package test;

import manager.Managers;
import manager.TaskManager;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import task.*;


import static org.junit.jupiter.api.Assertions.*;

public class InMemoryTaskManagerTest {

    private TaskManager manager;

    @BeforeEach
    void setUp() {
        manager = Managers.getDefault();
    }

    @Test
    void testAddAndGetTask() {
        Task task = new Task("Test task", "Description");
        manager.addTask(task);

        Task savedTask = manager.getTask(task.getId());
        assertNotNull(savedTask);
        assertEquals(task, savedTask);
    }

    @Test
    void testAddAndGetEpicWithSubtasks() {
        Epic epic = new Epic("Epic", "Description");
        manager.addEpic(epic);

        Subtask sub1 = new Subtask("Subtask1", "Description", epic.getId());
        Subtask sub2 = new Subtask("Subtask2", "Description", epic.getId());

        manager.addSubtask(sub1);
        manager.addSubtask(sub2);

        assertEquals(2, manager.getSubtasksOfEpic(epic.getId()).size());
        assertTrue(manager.getSubtasksOfEpic(epic.getId()).contains(sub1));
        assertTrue(manager.getSubtasksOfEpic(epic.getId()).contains(sub2));
    }

    @Test
    void testUpdateSubtaskStatusUpdatesEpic() {
        Epic epic = new Epic("Epic", "Description");
        manager.addEpic(epic);

        Subtask sub = new Subtask("Subtask", "Description", epic.getId());
        manager.addSubtask(sub);

        assertEquals(Status.NEW, manager.getEpic(epic.getId()).getStatus());

        sub.setStatus(Status.DONE);
        manager.updateSubtask(sub);

        assertEquals(Status.DONE, manager.getEpic(epic.getId()).getStatus());
    }

    @Test
    void testHistoryContainsViewedTasks() {
        Task task = new Task("Task", "Description");
        manager.addTask(task);
        manager.getTask(task.getId());

        Epic epic = new Epic("Epic", "Description");
        manager.addEpic(epic);
        manager.getEpic(epic.getId());

        Subtask subtask = new Subtask("Subtask", "Description", epic.getId());
        manager.addSubtask(subtask);
        manager.getSubtask(subtask.getId());

        assertEquals(3, manager.getHistory().size());
    }

    @Test
    void testHistorySizeLimit() {
        for (int i = 0; i < 15; i++) {
            Task task = new Task("Task " + i, "Description");
            manager.addTask(task);
            manager.getTask(task.getId());
        }
        assertTrue(manager.getHistory().size() <= 10);
    }

    //если идти по "списку нюансов" из ТЗ:

    //InMemoryTaskManager добавляет и находит задачи по id
    @Test
    void managerShouldStoreAndRetrieveTasksById() {
        TaskManager manager = Managers.getDefault();

        Task task = new Task("Test", "Desc");
        manager.addTask(task);

        assertEquals(task, manager.getTask(task.getId()));
    }

    //Не должно быть конфликта между задачами с ручным и авто id
    @Test
    void manualIdShouldNotConflictWithAutoGeneratedIds() {
        TaskManager manager = Managers.getDefault();

        Task manualTask = new Task("Manual", "M");
        manualTask.setId(100);
        manager.addTask(manualTask);

        Task autoTask = new Task("Auto", "A");
        manager.addTask(autoTask); // его id должен быть не 100

        assertNotEquals(100, autoTask.getId());
    }

    //Добавленная задача не изменяется при хранении
    @Test
    void storedTaskShouldNotBeModifiedExternally() {
        TaskManager manager = Managers.getDefault();

        Task task = new Task("Immutable", "Desc");
        manager.addTask(task);

        Task fromManager = manager.getTask(task.getId());

        assertEquals(task.getName(), fromManager.getName());
        assertEquals(task.getDescription(), fromManager.getDescription());
        assertEquals(task.getStatus(), fromManager.getStatus());
    }

    @Test
    void addingSubtaskWithSameIdAsEpicShouldThrow() {
        TaskManager manager = Managers.getDefault();

        Epic epic = new Epic("Epic", "Description");
        manager.addEpic(epic);


        Subtask subtask = new Subtask("Subtask", "Description", epic.getId());
        subtask.setId(epic.getId());  // id == epicId

        //ожидаем исключение при добавлении
        assertThrows(IllegalArgumentException.class, () -> {
            manager.addSubtask(subtask);
        });
    }
}